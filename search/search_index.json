{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pythoncodliver","text":"<p>this is just a demo for python</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Metaliguns77.github.io/pythoncodliver</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#pythoncodliver.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>pythoncodliver/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Metaliguns77/pythoncodliver/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pythoncodliver could always use more documentation, whether as part of the official pythoncodliver docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Metaliguns77/pythoncodliver/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up pythoncodliver for local development.</p> <ol> <li> <p>Fork the pythoncodliver repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/pythoncodliver.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv pythoncodliver\n$ cd pythoncodliver/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 pythoncodliver tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Metaliguns77/pythoncodliver/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install pythoncodliver, run this command in your terminal:</p> <pre><code>pip install pythoncodliver\n</code></pre> <p>This is the preferred method to install pythoncodliver, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install pythoncodliver from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Metaliguns77/pythoncodliver\n</code></pre>"},{"location":"pythoncodliver/","title":"pythoncodliver module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>To use pythoncodliver in a project:</p> <pre><code>import pythoncodliver\n</code></pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/","title":"KH Shakibul Islam lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-03-25 21:58:21.588890\n</pre> In\u00a0[2]: Copied! <pre>name = \"Khandaker Shakibul Islam\"\n\nprint(f\"Hello,  {name} let's get started with JavaScript\")\n</pre> name = \"Khandaker Shakibul Islam\"  print(f\"Hello,  {name} let's get started with JavaScript\") <pre>Hello,  Khandaker Shakibul Islam let's get started with JavaScript\n</pre> In\u00a0[3]: Copied! <pre>name = \"Khandaker Shakibul Islam\"\nprint(name.upper() +\"\\n\"+ name.lower() +\"\\n\"+ name.title())\n</pre> name = \"Khandaker Shakibul Islam\" print(name.upper() +\"\\n\"+ name.lower() +\"\\n\"+ name.title())  <pre>KHANDAKER SHAKIBUL ISLAM\nkhandaker shakibul islam\nKhandaker Shakibul Islam\n</pre> In\u00a0[4]: Copied! <pre>Name = \"Franklin D. Roosevelt\"\nquote = \"The only thing we have to fear is fear itself\"\nprint(f\"{Name} said, \\\"{quote}\\\"\")\n</pre> Name = \"Franklin D. Roosevelt\" quote = \"The only thing we have to fear is fear itself\" print(f\"{Name} said, \\\"{quote}\\\"\") <pre>Franklin D. Roosevelt said, \"The only thing we have to fear is fear itself\"\n</pre> In\u00a0[5]: Copied! <pre>name = \"\\n\\t John Doe \\t\\n\"\n\nprint(f\"Name with whitespace: {name}\")\n\n\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre>  name = \"\\n\\t John Doe \\t\\n\"  print(f\"Name with whitespace: {name}\")   print(name.lstrip()) print(name.rstrip()) print(name.strip())  <pre>Name with whitespace: \n\t John Doe \t\n\nJohn Doe \t\n\n\n\t John Doe\nJohn Doe\n</pre> In\u00a0[6]: Copied! <pre>name = [\"Yinan Feng\", \"Seth Connor\", \"Andy Paul\", \"Sabiha Hoissain\"]\nprint(name[0])\nprint(name[1]) \nprint(name[2])\nprint(name[3])\n</pre> name = [\"Yinan Feng\", \"Seth Connor\", \"Andy Paul\", \"Sabiha Hoissain\"] print(name[0]) print(name[1])  print(name[2]) print(name[3]) <pre>Yinan Feng\nSeth Connor\nAndy Paul\nSabiha Hoissain\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>Tansportation = [\"Car\", \"Bike\", \"Bus\", \"Train\"]\n\nprint(f\"I really like traveling by {Tansportation[3]}\")\n</pre> Tansportation = [\"Car\", \"Bike\", \"Bus\", \"Train\"]  print(f\"I really like traveling by {Tansportation[3]}\") <pre>I really like traveling by Train\n</pre> In\u00a0[8]: Copied! <pre>Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"]\nfor i in Pizza:\n    print(f\"I like {i} pizza\")\n</pre> Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"] for i in Pizza:     print(f\"I like {i} pizza\") <pre>I like Pepperoni pizza\nI like Cheese pizza\nI like Hawaiian pizza\nI like Meat Lovers pizza\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"]\nfor i in Pizza:\n    print(f\"I like {i} pizza\")\nprint(\"I really love pizza!\")\n</pre> Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"] for i in Pizza:     print(f\"I like {i} pizza\") print(\"I really love pizza!\") <pre>I like Pepperoni pizza\nI like Cheese pizza\nI like Hawaiian pizza\nI like Meat Lovers pizza\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"]\nfor i in animals:\n    print(f\"A {i} would make a great pet\")\n</pre> animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"] for i in animals:     print(f\"A {i} would make a great pet\") <pre>A Dog would make a great pet\nA Cat would make a great pet\nA Bird would make a great pet\nA Fish would make a great pet\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Rabbit\"]\nfor i in animals:\n    print(f\"A {i} would make a great pet\")\nprint(\"Any of these animals are safe to have\")\n</pre> animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Rabbit\"] for i in animals:     print(f\"A {i} would make a great pet\") print(\"Any of these animals are safe to have\") <pre>A Dog would make a great pet\nA Cat would make a great pet\nA Bird would make a great pet\nA Fish would make a great pet\nA Rabbit would make a great pet\nAny of these animals are safe to have\n</pre> In\u00a0[12]: Copied! <pre>numbers = list(range(1, 101))\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers = list(range(1, 101)) print(min(numbers)) print(max(numbers)) print(sum(numbers))     <pre>1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>for i in range(1, 21, 2):\n    print(i)\n</pre> for i in range(1, 21, 2):     print(i) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>list = list(range(3, 31, 3))\nfor i in list:\n    print(i)\n</pre> list = list(range(3, 31, 3)) for i in list:     print(i) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cube =[i**3 for i in range(1, 11)]\ncube\n</pre> cube =[i**3 for i in range(1, 11)] cube      Out[15]: <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</pre> In\u00a0[16]: Copied! <pre>print(f\"The first three items in the list are: {animals[0:3]}\")\n</pre> print(f\"The first three items in the list are: {animals[0:3]}\") <pre>The first three items in the list are: ['Dog', 'Cat', 'Bird']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>print(f\"Three items from the middle of the list are: {animals[1:4]}\")\n</pre> print(f\"Three items from the middle of the list are: {animals[1:4]}\") <pre>Three items from the middle of the list are: ['Cat', 'Bird', 'Fish']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>print(f\"Last three items in the list are: {animals[-3:]}\")\n</pre> print(f\"Last three items in the list are: {animals[-3:]}\") <pre>Last three items in the list are: ['Bird', 'Fish', 'Rabbit']\n</pre> In\u00a0[19]: Copied! <pre>buffet_foods = ('pizza', 'pasta', 'salad', 'soup', 'bread')\nfor food in buffet_foods:\n    print(food)\n</pre>  buffet_foods = ('pizza', 'pasta', 'salad', 'soup', 'bread') for food in buffet_foods:     print(food)  <pre>pizza\npasta\nsalad\nsoup\nbread\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>new_foods = (buffet_foods[:2] + (\"Roasted Chicken\", \"Fish &amp; Chips\") + buffet_foods[4:])\n\nfor food in new_foods:\n    print(food)\n</pre>   new_foods = (buffet_foods[:2] + (\"Roasted Chicken\", \"Fish &amp; Chips\") + buffet_foods[4:])  for food in new_foods:     print(food)  <pre>pizza\npasta\nRoasted Chicken\nFish &amp; Chips\nbread\n</pre> In\u00a0[21]: Copied! <pre>alien_color = \"green, yellow, red\"\nif alien_color == \"green\":\n    print(\"You just earned 5 points\")\nelse: \n    print()\n</pre> alien_color = \"green, yellow, red\" if alien_color == \"green\":     print(\"You just earned 5 points\") else:      print()  <pre>\n</pre> In\u00a0[22]: Copied! <pre>age = 26\nif age &lt; 2:\n    print(\"This person is a baby.\")\nelif 2 &lt; age &lt; 4:\n    print(\"This person is a toddler.\")\nelif 4 &lt; age &lt; 13:\n    print(\"This person is a kid.\")\nelif 13 &lt;age &lt; 20:\n    print(\"This person is a teenager.\")\nelif  20 &lt; age &lt; 65:\n    print(\"This person is an adult.\")\nelse:\n    print(\"This person is an elder.\")\n</pre> age = 26 if age &lt; 2:     print(\"This person is a baby.\") elif 2 &lt; age &lt; 4:     print(\"This person is a toddler.\") elif 4 &lt; age &lt; 13:     print(\"This person is a kid.\") elif 13  <pre>This person is an adult.\n</pre> In\u00a0[23]: Copied! <pre>fruits= ['mango', 'strawberry', 'kiwi']\n\n\nif 'bananas' in fruits:\n    print(\"You really like bananas!\")\nif 'mango' in fruits:\n    print(\"You really like mango!\")\nif 'strawberry' in fruits:\n    print(\"You really like strawberry!\")\nif 'kiwi' in fruits:\n    print(\"You really like kiwi!\")\nif 'apple' in fruits:\n    print(\"You really like apple!\")\n</pre>  fruits= ['mango', 'strawberry', 'kiwi']   if 'bananas' in fruits:     print(\"You really like bananas!\") if 'mango' in fruits:     print(\"You really like mango!\") if 'strawberry' in fruits:     print(\"You really like strawberry!\") if 'kiwi' in fruits:     print(\"You really like kiwi!\") if 'apple' in fruits:     print(\"You really like apple!\")   <pre>You really like mango!\nYou really like strawberry!\nYou really like kiwi!\n</pre> In\u00a0[24]: Copied! <pre>usernames = ['admin', 'shakib', 'akib', 'nishi', 'borno']\n\nfor i in usernames:\n    if i== 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {i.title()}, thank you for logging in again.\")\n</pre>  usernames = ['admin', 'shakib', 'akib', 'nishi', 'borno']  for i in usernames:     if i== 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {i.title()}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Shakib, thank you for logging in again.\nHello Akib, thank you for logging in again.\nHello Nishi, thank you for logging in again.\nHello Borno, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = ['admin', 'shakib', 'akib', 'nishi', 'borno']\n\n\nnew_users = ['shakib', 'nishi', 'andy', 'max', 'sabiha']\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"The username {new_user} has already been used, you will need to enter a new username.\")\n    else:\n        print(f\"The username {new_user} is available.\")\n</pre>  current_users = ['admin', 'shakib', 'akib', 'nishi', 'borno']   new_users = ['shakib', 'nishi', 'andy', 'max', 'sabiha']  current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"The username {new_user} has already been used, you will need to enter a new username.\")     else:         print(f\"The username {new_user} is available.\")  <pre>The username shakib has already been used, you will need to enter a new username.\nThe username nishi has already been used, you will need to enter a new username.\nThe username andy is available.\nThe username max is available.\nThe username sabiha is available.\n</pre> In\u00a0[26]: Copied! <pre>list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor number in list:\n    if number == 1:\n        ordinal = '1st'\n    elif number == 2:\n        ordinal = '2nd'\n    elif number == 3:\n        ordinal = '3rd'\n    else:\n        ordinal = str(number) + 'th'\n    print(ordinal)\n</pre> list = [1, 2, 3, 4, 5, 6, 7, 8, 9] for number in list:     if number == 1:         ordinal = '1st'     elif number == 2:         ordinal = '2nd'     elif number == 3:         ordinal = '3rd'     else:         ordinal = str(number) + 'th'     print(ordinal)  <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/KH_Shakibul_Islam_lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}